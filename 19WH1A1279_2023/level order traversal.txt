Given inorder and preorder traversals of a binary tree print its levelorder traversal.
Print level order traversal as shown in sample output.

Sample Input 0

9
4 2 5 1 8 6 9 3 7
1 2 4 5 3 6 8 9 7
Sample Output 0

1: 1
2: 2 3
3: 4 5 6 7
4: 8 9



1. Recursive Solution with Vector of Vector

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
int pi=0;
int findIndex(vector<int>& l,int si,int ei,int k){
        for(int i=si;i<=ei;i++){
            if(l[i]==k){return i;}
        }
        return -1;
}
TreeNode* fun(vector<int>& preorder, vector<int>& inorder, int si, int ei){
        if(si>ei){return NULL;}
        int idx = findIndex(inorder,si,ei,preorder[pi]);
        TreeNode* r = new TreeNode (preorder[pi]);
        pi++;
        r->left = fun(preorder,inorder,si,idx-1);
        r->right= fun(preorder,inorder,idx+1,ei);
        return r;
}
TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return fun(preorder,inorder,0,(inorder).size()-1);
}

void levelOrder(TreeNode* r, int l, vector<vector<int>>& v){
    if(r==NULL){return;}
    if(l==v.size()){v.push_back({});}
    v[l].push_back(r->val);
    levelOrder(r->left,l+1,v);
    levelOrder(r->right,l+1,v);
}
vector<vector<int>> levelWiseOrder(TreeNode* r){
    vector<vector<int>> ans;
    levelOrder(r, 0,ans);
    return ans;
    
}
int main()
{
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    vector<vector<int>> levelorder = levelWiseOrder(r);
      for(int i=0;i<levelorder.size();i++){
          cout<<i+1<<": ";
          for(int j=0;j<levelorder[i].size();j++){
              cout<<levelorder[i][j]<<" ";
          }
          cout<<"\n";
      }


    return 0;
}


2.  Two Queues Approach node Q and level Q

void levelOrder(TreeNode* r, int l, vector<vector<int>>& v){
    if(r==NULL){return;}
    if(l==v.size()){v.push_back({});}
    v[l].push_back(r->val);
    levelOrder(r->left,l+1,v);
    levelOrder(r->right,l+1,v);
}
vector<vector<int>> levelWiseOrder(TreeNode* r){
    vector<vector<int>> ans;
    if(r==NULL){return ans;}
    queue<TreeNode *>q;
    queue<int>lq;
    q.push(r);
    lq.push(0);
    vector<int>level;
    int cur_l=0;
    while(q.size()!=0){
        r=q.front();
        q.pop();
        int lr = lq.front();
        lq.pop();
        if(lr==cur_l){level.push_back(r->val);}
        else{
            ans.push_back(level);
            level.clear();
            level.push_back(r->val);
            cur_l = lr;
        }
        if(r->left!=NULL){
            q.push(r->left);
            lq.push(lr+1);
        }
        if(r->right!=NULL){
            q.push(r->right);
            lq.push(lr+1);
        }
    }
    ans.push_back(level); 
    return ans;
    
}
int main()
{
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    vector<vector<int>> levelorder = levelWiseOrder(r);
      for(int i=0;i<levelorder.size();i++){
          cout<<i+1<<": ";
          for(int j=0;j<levelorder[i].size();j++){
              cout<<levelorder[i][j]<<" ";
          }
          cout<<"\n";
      }


    return 0;
}


3.  Queue with NULL/None inserted

void levelOrder(TreeNode* r){
    if(r==NULL){return;}
    queue<TreeNode*> q;
    vector<int> v;
    int l=1;
    q.push(r);
    q.push(NULL);
    while(q.size()!=0){
        r=q.front();
        q.pop();
        if(r!=NULL){
            v.push_back(r->val);
            if(r->left!=NULL){
                q.push(r->left);
            }
            if(r->right!=NULL){
                q.push(r->right);
            }
        }
        else{
            cout<<l<<": ";
            for(int i=0;i<v.size();i++){
                cout<<v[i]<<" ";
            }
            v.clear();
            cout<<"\n";
            l=l+1;
            if(q.size()!=0){q.push(NULL);}
        }
    }
}
int main()
{
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    levelOrder(r);

    return 0;
}


4.  Get a count of Nodes at current level (uses Nested Loop to free up a level)
void levelOrder(TreeNode* r){
    if(r==NULL){return;}
    queue<TreeNode*> q;
    vector<int> v;
    int l=1;
    q.push(r);
    while(q.size()!=0){
        cout<<l<<": ";
        l++;
        int c=q.size();
        for(int i=0;i<c;i++){
            r=q.front();
            q.pop();
            cout<<r->val<<" ";
            if(r->left!=NULL){
                q.push(r->left);
            }
            if(r->right!=NULL){
                q.push(r->right);
            }
        }
        cout<<"\n";

       } 
}

int main()
{
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    levelOrder(r);

    return 0;
}



5.  Queue of type Pair or Tuple

vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL){return ans;}
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        vector<int>level;
        int cur_l=0;
        while(q.size()!=0){
            root=q.front().first;
            int l = q.front().second;
            q.pop();
            if (l == cur_l) level.push_back(root->val);
            else {
                ans.push_back(level);
                level.clear();
                level.push_back(root->val);
                cur_l = l;
            }
            if(root->left!=NULL){
                q.push({root->left,l+1});
            }
            if(root->right!=NULL){
                q.push({root->right,l+1});
            }
        }
        ans.push_back(level);
        return ans;
}
int main() {
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    vector<vector<int>> v = levelOrder(r);
    for(int i=0;i<v.size();i++){
        cout<<i+1<<": ";
        for(int j=0;j<v[i].size();j++){
            cout<<v[i][j]<<" ";
        }
        cout<<"\n";
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}


6.  Alteranting Queues

void levelOrder(TreeNode* r){
    if(r==NULL){return;}
    queue<TreeNode*> q1;
    queue<TreeNode*> q2;
    vector<int> v;
    int l=1;
    q1.push(r);
    while(true){
    if(q1.size()==0){break;}
    cout<<l<<": ";
    l=l+1;
    while(q1.size()!=0){
        r=q1.front();
        q1.pop();
        if(r->left){
            q2.push(r->left);
        }
        if(r->right!=NULL){
            q2.push(r->right);
        }
        cout<<(r->val)<<" ";
    }
    cout<<"\n";
        if(q2.size()==0){break;}
    cout<<l<<": ";  
    l=l+1;
    while(q2.size()!=0){
        r=q2.front();
        q2.pop();
        if(r->left){
            q1.push(r->left);
        }
        if(r->right!=NULL){
            q1.push(r->right);
        }
        cout<<(r->val)<<" ";
    }
    cout<<"\n";
    }
}
int main()
{
    vector<int> inorder;
    vector<int> preorder;
    int n;
    cin>>n;
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        inorder.push_back(x);
    }
    for (int i = 1; i <= n; i++){
        int x;
        cin>>x;
        preorder.push_back(x);
    }
    TreeNode* r = buildTree(preorder, inorder);
    levelOrder(r);

    return 0;
}

















